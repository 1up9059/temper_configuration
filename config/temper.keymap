
#include "zmk-nodefree-config/helper.h"
#include "zmk-nodefree-config/keypos_def/keypos_36keys.h"

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define NUM 1
#define SYM 2
#define FUN 3
#define SYS 4

#define XXX &none
#define ___ &trans

#define QUICK_TAP_MS 175

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  /* left hand  */
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  /* right hand */
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      /* thumbs     */

// ---------- SETTINGS ----------

&sk {  // sticky-key config
    release-after-ms = <600>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

// ----------- COMBOS -----------
#undef COMBO_HOOK
#define COMBO_HOOK require-prior-idle-ms = <150>;
#define COMBO_TERM_FAST 30
#define COMBO_TERM_SLOW 50

// left and right brace { }
ZMK_COMBO(lbrc, &kp LBRC, RT1 RT2, DEF NUM, COMBO_TERM_FAST)
ZMK_COMBO(rbrc, &kp RBRC, RT2 RT3, DEF NUM, COMBO_TERM_FAST)

// left and right parenthesis ( )
ZMK_COMBO(lpar, &kp LPAR, RM1 RM2, DEF NUM, COMBO_TERM_FAST)
ZMK_COMBO(rpar, &kp RPAR, RM2 RM3, DEF NUM, COMBO_TERM_FAST)

// left and right bracket [ ]
ZMK_COMBO(lbkt, &kp LBKT, RB1 RB2, DEF NUM, COMBO_TERM_FAST)
ZMK_COMBO(rbkt, &kp RBKT, RB2 RB3, DEF NUM, COMBO_TERM_FAST)

ZMK_COMBO(equal, &kp EQUAL, RM0 RM1, DEF NUM, COMBO_TERM_FAST)

ZMK_COMBO(underscore, &kp UNDER, RB0 RB1, DEF NUM, COMBO_TERM_FAST)


// ----------- KEYMAP -----------

// Cross-hand only home row mods
#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

// tap: sticky shift | shift + tap or double-tap: caps word | hold: navigation layer
#define smart_shift smart_shift_inner SYM 0
ZMK_BEHAVIOR(smart_shift_inner, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&shift_word>;
)
ZMK_BEHAVIOR(shift_word, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <MOD_LSFT>;
)

// tap: backspace | lshft + tap: delete | rshft + tap: shift-delete
ZMK_BEHAVIOR(bs_del, mod_morph,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    keep-mods = <MOD_RSFT>;
)

// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_BEHAVIOR(NAME, mod_morph, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: space | shift + tap: dot -> space -> sticky shift | hold: space
SIMPLE_MORPH(smart_space, SFT, &kp SPACE, &dot_space)
ZMK_BEHAVIOR(dot_space, macro,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp DOT &kp SPACE &sk LSHFT>;
)

// tap: colon | shift + tap: semicolon
SIMPLE_MORPH(colon_semi, SFT, &kp COLON, &kp SEMI)

// double-tap to enter bootloader
ZMK_BEHAVIOR(boot, tap_dance,
    bindings = <&none>, <&bootloader>;
)

ZMK_CONDITIONAL_LAYER(NUM FUN, SYS)

ZMK_LAYER(Base,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      &kp APOS      &kp COMMA      &kp DOT        &kp P         &kp Y             &kp F         &kp G         &kp C         &kp R         &kp L
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &hml LGUI A   &hml LALT O  &hml LCTRL E  &hml LSHFT U      &kp I             &kp D     &hmr RSHFT H  &hmr RCTRL T   &hmr RALT N   &hmr RGUI S
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &colon_semi      &kp Q         &kp J         &kp K         &kp X             &kp B         &kp M         &kp W         &kp V         &kp Z
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                 &lt SYM ESC     &bs_del     &lt NUM TAB      &lt FUN ENTER &smart_space  &smart_shift
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(Numpad,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      &kp GRAVE      &kp LT        &kp GT          XXX           XXX            &kp LBKT       &kp N7        &kp N8        &kp N9       &kp RBKT
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      &sk LGUI      &sk LALT      &sk LCTRL     &sk LSHFT        XXX            &kp PLUS       &kp N4        &kp N5        &kp N6       &kp SLASH
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         XXX           XXX           XXX           XXX           XXX            &kp MINUS      &kp N1        &kp N2        &kp N3     &kp BACKSLASH
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                     ___           ___           ___               ___         &kp N0      &kp KP_DOT
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(Symbol,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      &kp PG_UP     &kp HOME       &kp UP        &kp END         XXX               XXX           XXX           XXX           XXX           XXX
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      &kp PG_DN     &kp LEFT      &kp DOWN      &kp RIGHT        XXX               XXX           XXX           XXX           XXX           XXX
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         XXX           XXX           XXX           XXX           XXX               XXX           XXX           XXX           XXX           XXX
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                     ___           ___           ___               ___           XXX           XXX
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(Function,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
         XXX           XXX           XXX           XXX           XXX               XXX         &kp F7         &kp F8       &kp F9        &kp F12
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      &sk LGUI      &sk LALT      &sk LCTRL     &sk LSHFT        XXX               XXX      &hmr RSHFT F4 &hmr RCTRL F5 &hmr RALT F6  &hmr RGUI F11
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         XXX           XXX           XXX           XXX           XXX               XXX         &kp F1         &kp F2       &kp F3        &kp F10
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                     ___           ___           ___               ___           XXX           XXX
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

ZMK_LAYER(System,
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        &boot          XXX           XXX           XXX           XXX               XXX           XXX           XXX           XXX           XXX
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         XXX           XXX           XXX           XXX           XXX               XXX           XXX           XXX           XXX           XXX
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
         XXX           XXX           XXX           XXX           XXX               XXX           XXX           XXX           XXX           XXX
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                     XXX           XXX           XXX               XXX           XXX           XXX
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
)

// vim: filetype=c
